#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W      &kp E      &kp R      &kp T                                                   &kp Y        &kp U  &kp I      &kp O    &mt BACKSPACE P
&mt LCTRL A       &kp S      &kp D      &kp F      &kp G        &kp LS(LG(S))      &lt_to_layer_0 4 MINUS  &kp H        &kp J  &kp K      &kp L    &mt LCTRL SEMICOLON
&mt LEFT_SHIFT Z  &kp X      &kp C      &kp V      &kp B        &kp TAB            &kp RA(GRAVE)           &kp N        &kp M  &kp COMMA  &kp DOT  &mt LEFT_SHIFT SLASH
&mt LCTRL ESCAPE  &kp EQUAL  &kp EQUAL  &mkp LCLK  &lt 1 SPACE  &kp LEFT_ALT       &lt 4 BACKSPACE         &lt 3 ENTER                             &mt RIGHT_WIN SQT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        MOUSE {
            bindings = <
&trans        &trans          &trans     &trans     &trans                      &trans         &kp PAGE_UP     &kp UP_ARROW    &kp PAGE_DOWN    &trans
&kp RCTRL     &kp LEFT_SHIFT  &kp LC(C)  &kp LC(X)  &trans  &trans      &trans  &kp BACKSPACE  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&kp LEFT_ALT  &trans          &trans     &trans     &trans  &trans      &trans  &trans         &kp HOME        &mkp MB2        &kp END          &trans
&trans        &trans          &trans     &trans     &trans  &trans      &trans  &trans                                                          &trans
            >;
        };

        function {
            bindings = <
&kp EXCLAMATION  &kp AT_SIGN   &kp HASH          &kp DOLLAR         &kp PERCENT                                  &kp CARET             &kp AMPERSAND  &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp NUMBER_1     &kp NUMBER_2  &kp NUMBER_3      &kp NUMBER_4       &kp NUMBER_5    &trans               &trans  &kp NUMBER_6          &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9          &kp NUMBER_0
&kp MINUS        &kp PLUS      &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE      &trans  &kp NON_US_BACKSLASH  &kp PIPE       &kp GRAVE     &kp TILDE             &trans
&kp UNDERSCORE   &kp EQUAL     &trans            &trans             &trans          &trans               &trans  &trans                                                                   &trans
            >;
        };

        Number {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                             &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &trans     &trans
&kp F6   &kp F7   &kp F8  &kp F9  &kp F10  &trans      &kp EQUAL     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp PLUS   &kp ASTERISK
&kp F11  &kp F12  &trans  &trans  &trans   &trans      &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp MINUS  &kp SLASH
&trans   &trans   &trans  &trans  &trans   &trans      &trans        &trans                                               &trans
            >;
        };

        BT {
            bindings = <
&trans  &bt BT_SEL 0  &bt BT_SEL 1  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans        &trans        &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        Function {
            bindings = <
&trans  &trans  &trans  &trans        &trans                      &trans  &kp F7  &kp F8  &kp F9  &kp F10
&trans  &trans  &trans  &trans        &trans  &trans      &trans  &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans        &trans  &trans      &trans  &trans  &kp F1  &kp F2  &kp F3  &kp F12
&trans  &trans  &trans  &kp LEFT_ALT  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        NUM {
            bindings = <
&kp MINUS                   &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp PLUS                                                   &kp CARET         &kp AMPERSAND      &kp TILDE       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp SLASH                   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp ASTERISK  &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp EXCLAMATION   &kp AT_SIGN        &kp HASH        &kp DOLLAR            &kp PERCENT
&mt LEFT_SHIFT KP_NUMBER_0  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp PERIOD    &kp EQUAL                    &trans          &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE  &kp RIGHT_BRACE       &kp BACKSLASH
&trans                      &trans           &trans           &trans           &trans        &trans                       &trans          &trans                                                                     &kp PIPE
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
